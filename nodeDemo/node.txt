xlsx

1.简介
V8引擎，c++
典型弱点--位运算（原因：int，double。如转码，编码等）
1.1特点
	异步I/O，事件与回调，单线程（webworkers--child_progress），跨平台(libuv)
1.2应用场景
	I/O密集（适合），cpu密集（良好，要合理调度），分布式应用（）

2.模块机制
2.1CommonJS规范与模块化
	模块引用（require-module.exports）
2.2Node模块实现（路径分析->文件定位->编译执行）
	核心模块（Node）（直接编译成二进制执行文件），文件模块（用户）
	模块加载过程
		优先从缓存（的二进制文件）加载->（路径分析（逐层向上查找）->文件定位（分析）->编译执行（不同后缀文件的编译））
2.3核心模块（内建模块，编写核心模块）
2.4C/C++扩展模块
	工具：GYP项目生成工具，V8引擎C++库，libuv库，Node内部库，其他
！学习	编写扩展模块（也可编写核心模块，c++编写，放到目录下）
	加载
2.5模块调用栈（process.binding()。。。）
2.6包与NPM
	包结构，包描述文件（package.json），npm（全局安装，本地安装，非官方源安装），npm钩子命令，发布包，局域NPM（企业仓库）
2.7前后端共用模块
	AMD（define(id?,dependencies?,factory)），CMD（define([dep1,dep2],function(dep1,dep2){})）

3异步I/O
3.1Node的异步I/O
	事件循环
	观察者
	请求对象
	执行毁掉
3.2非I/O的异步API
	定时器
	process.nextTick()
	setImmediate()
3.3事件驱动与高性能服务器
	实质：主循环+事件触发

4.异步编程
4.1函数式编程
	高阶函数（入参或return有函数的函数）
	偏函数（调用另外一个预置函数的函数）
4.2优势和难点
	优势
	难点（异常捕获，函数嵌套过深，阻塞代码，多线程，异步转同步）
4.3解决方案
	事件发布/订阅模式（如events模块，emit，on）
		继承events模块
		利用事件队列解决雪崩
		多异步之间的协作方案
		EventProxy原理 和 异常处理
	Promise/Deferred模式
		Promise/A
		多异步协作
		进阶
	流程控制库
		尾触发 与 Next
		async
		Step
		wind
4.4异步并发控制
	bagpipe解决方案（最大并发数）
	async解决方案

5.内存控制
5.1 V8垃圾回收机制与内存限制
	内存限制（64位-1.4G，32位-0.7G（老生代），新生代见下）process.memoryUsage()
	初始化时修改内存限制（node --max-old-space-size=1700 test.js）（node --max-new-space-size=1024 test.js ）且不能再动态改变
	V8垃圾回收机制
		（分代式--新生代（对应new-space-size，对象存活时间短）
		（64位32M，32位16M），老生代（old-space-size，存活时间长或常驻内存））
		（新生代回收算法--scavenge（cheney）--分为from和to，存活复制到to，非存活释放，然后to和from互换角色（翻转））
		（新生代对象多次（>1次）复制依然存活，且to占用超限（25%），则被移到老生代（晋升））
		（老生代回收算法--标记清除+标记整理
		--（标记活着的对象，清除没有标记的对象）
		--（回收后内存不连续了，所以需要整理，整理的原理是将活的对象往一端移动，然后清除掉边界外的内存）
		--（整理需要移动，较慢，因而主要使用标记清除，内存不足以分配连续空间时才整理））		回收时会暂停应用执行--交替进行，延迟清理，增量式整理
	查看垃圾回收日志（启动时添加--trace_gcXXX，启动时使用--prof可分析性能，linux-tick-processor统计日志）
5.2高效使用内存
	作用域（标识符查找，作用域链，主动释放（delete删除引用 ，或重新赋值（null或undefined，非空值也可释放但会再次占用）（delete可能影响优化）））
	闭包
5.3内存指标
	查看内存使用情况（process.memoryUsage()）